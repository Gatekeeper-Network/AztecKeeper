{
  "contractName": "JoinSplitFluidABIEncoder",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.5.4+commit.9549d8ff\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aztec/protocol/contracts/ACE/validators/joinSplitFluid/JoinSplitFluidABIEncoder.sol\":\"JoinSplitFluidABIEncoder\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@aztec/protocol/contracts/ACE/validators/joinSplitFluid/JoinSplitFluidABIEncoder.sol\":{\"keccak256\":\"0xab788f2f01d6e8e85e4793c1dce1d205d07f8139a6dba264b36c2903dc5e4370\",\"urls\":[\"bzzr://c1a9b7761626a5b2247abda838a3fcbbdc8611f8e3b721ad56beda1d1484ef46\"]}},\"version\":1}",
  "bytecode": "0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820f75f05f3c8106b8413db7c0bd5849f0b2338617a65fa5e3e57fda244aab7468e0029",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820f75f05f3c8106b8413db7c0bd5849f0b2338617a65fa5e3e57fda244aab7468e0029",
  "sourceMap": "33:14143:10:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24",
  "deployedSourceMap": "33:14143:10:-;;;;;;;;",
  "source": "pragma solidity >=0.5.0 <0.6.0;\n\nlibrary JoinSplitFluidABIEncoder {\n    /**\n     * Calldata map\n     * 0x04:0x24      = calldata location of proofData byte array\n     * 0x24:0x44      = message sender\n     * 0x44:0x64      = h_x\n     * 0x64:0x84      = h_y\n     * 0x84:0xa4      = t2_x0\n     * 0xa4:0xc4      = t2_x1\n     * 0xc4:0xe4      = t2_y0\n     * 0xe4:0x104     = t2_y1\n     * 0x104:0x124    = length of proofData byte array\n     * 0x124:0x144    = challenge\n     * 0x144:0x164    = offset in byte array to notes\n     * 0x164:0x184    = offset in byte array to inputOwners\n     * 0x184:0x1a4    = offset in byte array to outputOwners\n     * 0x1a4:0x1c4    = offset in byte array to metadata\n     */\n\n\n    function encodeAndExit() internal pure {\n        assembly {\n            // set up initial variables\n            let notes := add(0x104, calldataload(0x144))\n            let n := calldataload(notes)\n            let inputOwners := add(0x124, calldataload(0x164)) // one word after input owners = 1st\n            let outputOwners := add(0x124, calldataload(0x184)) // one word after outputOwners = 1st\n            let metadata := add(0x144, calldataload(0x1a4)) // two words after metadata = 1st\n\n            // memory map of `proofOutputs`\n\n            // `returndata` starts at 0x160\n            // `proofOutputs` starts at 0x180\n            // 0x160 - 0x180 = relative offset in returndata to first bytes argument (0x20)\n            // 0x180 - 0x1a0 = byte length of `proofOutputs`\n            // 0x1a0 - 0x1c0 = number of `proofOutputs` entries (2)\n            // 0x1c0 - 0x1e0 = relative memory offset between `v` and start of `proofOutput`\n\n            // `proofOutput A` - t, starts at 0x1e0\n            // 0x1e0 - 0x200 = length of `proofOutputA`\n            // 0x200 - 0x220 = relative offset between `t` and `inputNotes`\n            // 0x220 - 0x240 = relative offset between `t` and `outputNotes`\n            // 0x240 - 0x260 = `publicOwner`\n            // 0x260 - 0x280 = `publicValue`\n            // 0x280 - 0x2a0 = `challenge`\n\n            // `inputNotes A` starts at 0x2a0\n            // structure of `inputNotes` and `outputNotes`\n            // 0x00 - 0x20 = byte length of notes array\n            // 0x20 - 0x40 = number of notes `i`\n            // the next `i` consecutive blocks of 0x20-sized memory contain relative offset between\n            // start of notes array and the location of the `note`\n\n            // `proofOutput B` - r\n            // 0x00 - 0x20 = length of `proofOutput B`\n            // 0x20 - 0x40 = relative offset between `r` and `inputNotes`\n            // 0x40 - 0x60 = relative offset between `r` and `outputNotes`\n            // 0x60 - 0x80 = `publicOwner`\n            // 0x80 - 0xa0 = `publicValue`\n            // 0xa0 - 0xc0 = `challenge`\n\n            // 'inputNotes B'\n            // structure of `inputNotes` and `outputNotes`\n            // 0x00 - 0x20 = byte length of notes array\n            // 0x20 - 0x40 = number of notes `i`\n            // the next `i` consecutive blocks of 0x20-sized memory contain relative offset between\n            // start of notes array and the location of the `note`\n\n            // structure of a `note`\n            // 0x00 - 0x20 = size of `note`\n            // 0x20 - 0x40 = `noteType`\n            // 0x40 - 0x60 = `owner`\n            // 0x60 - 0x80 = `noteHash`\n            // 0x80 - 0xa0 = size of note `data`\n            // 0xa0 - 0xc0 = compressed note coordinate `gamma` (part of `data`)\n            // 0xc0 - 0xe0 = compressed note coordinate `sigma` (part of `data`)\n            // 0xe0 - ???? = remaining note metadata\n\n            // `proofOutputs` must form a monolithic block of memory that we can return.\n            // `s` points to the memory location of the start of the current note\n            // `inputPtr` points to the start of the current `notes` dynamic bytes array\n\n            // length of proofOutputs is at s\n            mstore(0x1a0, 0x02)                            // there are two proofOutput objects for a join-split fluid\n            mstore(0x1c0, 0x80)                            // offset to 1st proof\n            // 0x1e0 = offset to 2nd proof\n            // length of proofOutput is at s + 0x60\n            mstore(0x220, 0xc0)                            // location of inputNotes\n            mstore(0x260, 0x00)                            // publicOwner is 0\n            mstore(0x280, 0x00)                            // publicValue is 0\n\n            mstore(0x2a0, calldataload(0x124))\n\n            // set note pointer, offsetting lookup indices for each input note\n\n            /////////////////// PROOF OUTPUT A: START OF INPUT NOTES //////////////////\n            // 0x2c0 = number of bytes in `inputNotes` (leave blank for now)\n            // 0x2e0 = number of input notes\n            mstore(0x2e0, 0x01)\n\n            // 0x300 = relative offset to 1st input note (0x60)\n            mstore(0x300, 0x60)\n\n            // Start of inputNote[0]\n            // get pointer to metadata\n            let metadataIndex := calldataload(metadata)\n            // get size of metadata\n            let metadataLength := calldataload(add(metadataIndex, sub(metadata, 0x40)))\n\n            // copy note data to 0x20 - 0xa0\n            mstore(0x00, 0x01)\n            calldatacopy(0x20, add(notes, 0x120), 0x80) // get gamma, sigma\n\n            // store note length in `s` = 0x320\n            mstore(0x320, add(0xc0, metadataLength))\n            // store note type (UXTO type, 0x01) in `s + 0x20`\n            mstore(0x340, 0x01)\n            // store the owner of the note in `s + 0x40`\n            mstore(0x360, calldataload(outputOwners))\n            // store note hash\n            mstore(0x380, keccak256(0x00, 0xa0))\n            // store note metadata length if `s + 0x80`\n            mstore(0x3a0, add(0x40, metadataLength))\n            // store compressed note coordinate gamma in `s + 0xa0`\n            mstore(\n                0x3c0,\n                or(\n                    mload(0x20),\n                    shl(255, and(mload(0x40), 0x01))\n                )\n            )\n            // store compressed note coordinate sigma in `s + 0xc0`\n            mstore(\n                0x3e0,\n                or(\n                    mload(0x60),\n                    shl(255, and(mload(0x80), 0x01))\n                )\n            )\n            // copy metadata into `s + 0xe0`\n            calldatacopy(0x400, add(metadataIndex, sub(metadata, 0x20)), metadataLength)\n            // compute the relative offset to index this note in our returndata\n\n            // increase s by note length\n\n            // store relative memory offset to outputNotes\n            mstore(0x240, add(0x200, metadataLength))\n            // store the length of inputNotes at 0x2c0\n            mstore(0x2c0, add(0x120, metadataLength))\n            ///////////////// PROOF OUTPUT A: START OF OUTPUT NOTES (1) ///////////////////\n\n            // transition between input and output notes\n\n            // 0x400 + metadataLength = byte length of output notes (0x120)\n            // 0x420 + metadataLength = # of output notes (1)\n            // 0x440 + metadataLength = offset to outputNotes[0] (0x60)\n            mstore(add(0x400, metadataLength), 0x120) // store length of output notes\n            mstore(add(0x420, metadataLength), 0x01) // store number of output notes\n            mstore(add(0x440, metadataLength), 0x60) // store offset to outputNotes[0]\n\n            // construct note hash\n            // copy 1st note note to 0x20 - 0xa0\n            calldatacopy(0x20, add(notes, 0x60), 0x80) // get gamma, sigma\n\n            // store note length in `s`\n            mstore(add(0x460, metadataLength), 0xc0)\n            // store note type (UXTO type, 0x01) in `s + 0x20`\n            mstore(add(0x480, metadataLength), 0x01)\n            // store note owner in `s + 0x40`\n            mstore(add(0x4a0, metadataLength), calldataload(inputOwners))\n            // store note hash in `s + 0x60`\n            mstore(add(0x4c0, metadataLength), keccak256(0x00, 0xa0))\n            // store note metadata length in `s + 0x80` (just the coordinates)\n            mstore(add(0x4e0, metadataLength), 0x40)\n            // store compressed note coordinate gamma in `s + 0xa0`\n            mstore(\n                add(0x500, metadataLength),\n                or(\n                    mload(0x20),\n                    shl(255, and(mload(0x40), 0x01))\n                )\n            )\n            // store compressed note coordinate sigma in `s + 0xc0`\n            mstore(\n                add(0x520, metadataLength),\n                or(\n                    mload(0x60),\n                    shl(255, and(mload(0x80), 0x01))\n                )\n            )\n            // compute the relative offset to index this note in our returndata\n            mstore(add(0x440, metadataLength), 0x60) // relative offset to note\n\n            // now we need to transition between first and second proofOutput\n            // s is going to point to the end of the outputNotes array\n            // so, s is our absolute pointer to the start of the 2nd proofOutputs entry\n            // we know that 'proofOutputs' starts at 0x180\n            // so (s - 0x180) = relative offset to second proofOutputs entry\n            let startOfProofOutput := add(0x540, metadataLength)\n\n            // proofOutput[0].length = start of proofOutput[1] - start of proofOutput[0] - 0x20\n            // proofOutput[0].length = (0x540 + metadataLength) - 0x200 - 0x20 = 0x320 + metadataLength\n            mstore(0x200, add(0x320, metadataLength)) // length of proofOutput\n            mstore(0x1e0, add(0x3c0, metadataLength)) // offset to get to second proofOutput\n\n            // s points to the start of proofOutputs[0]\n            let s := startOfProofOutput\n            mstore(add(s, 0x20), 0xc0)   // location of inputNotes\n            mstore(add(s, 0x40), 0x100)  // location of outputNotes\n            mstore(add(s, 0x60), 0x00)   // publicOwner\n            mstore(add(s, 0x80), 0x00)   // publicValue\n\n            // compute challenge = kecck256(challenge)\n            mstore(0x20, calldataload(0x124))\n            mstore(add(s, 0xa0), keccak256(0x20, 0x20)) // challenge\n            // 0x00 length of proofOutput\n            // 0x20 location of inputNotes\n            // 0x40 location of outputNotes\n            // 0x60 publicOwner\n            // 0x80 publicValue\n            // 0xa0 = inputNoteData\n            mstore(add(s, 0xc0), 0x20) // length of input notes array (1 word)\n            mstore(add(s, 0xe0), 0x00) // number of entries (0 words)\n\n            // set notesPtr = proofOutputs[1].outputNotes\n            let notesPtr := add(s, 0x100)\n\n            // s + 0x20 = number of notes = n - 2\n            mstore(add(notesPtr, 0x20), sub(n, 2))\n\n            // set s to point to proofOutputs[1].outputNotes[0]\n            s := add(add(s, 0x140), mul(0x20, sub(n, 2)))\n\n            // Output notes:\n            // first output note needs to go into the first proofOutput object\n            // second output note onwards, needs to go into the second proofOutput object\n            for { let i := 0x02 } lt(i, n) { i := add(i, 0x01) } {\n\n            /////////////////// START OF PROOF OUTPUT B  ////////////////////\n\n                // get pointer to metadata\n                metadataIndex := calldataload(add(metadata, mul(sub(i, 0x01), 0x20)))\n                // get size of metadata\n                metadataLength := calldataload(add(sub(metadata, 0x40), metadataIndex))\n\n                mstore(0x00, 0x01)\n                // copy note data to 0x20 - 0xa0\n                calldatacopy(\n                    0x20,\n                    add(add(notes, 0x60), mul(i, 0xc0)),\n                    0x80\n                ) // get gamma, sigma\n\n                // store note length in `s`\n                mstore(s, add(0xc0, metadataLength))\n                // store note type (UXTO type, 0x01) in `s + 0x20`\n                mstore(add(s, 0x20), 0x01)\n                // store the owner of the note in `s + 0x40`\n                mstore(add(s, 0x40), calldataload(add(outputOwners, mul(sub(i, 0x01), 0x20))))\n                // store note hash\n                mstore(add(s, 0x60), keccak256(0x00, 0xa0))\n                // store note metadata length if `s + 0x80`\n                mstore(add(s, 0x80), add(0x40, metadataLength))\n                // store compressed note coordinate gamma in `s + 0xa0`\n                mstore(\n                    add(s, 0xa0),\n                    or(\n                        mload(0x20),\n                        shl(255, and(mload(0x40), 0x01))\n                    )\n                )\n                // store compressed note coordinate sigma in `s + 0xc0`\n                mstore(\n                    add(s, 0xc0),\n                    or(\n                        mload(0x60),\n                        shl(255, and(mload(0x80), 0x01))\n                    )\n                )\n                // copy metadata into `s + 0xe0`\n                calldatacopy(add(s, 0xe0), add(metadataIndex, sub(metadata, 0x20)), metadataLength)\n                // compute the relative offset to index this note in our returndata\n                mstore(add(notesPtr, mul(i, 0x20)), sub(s, notesPtr)) // relative offset to note\n\n                // increase s by note length\n                s := add(s, add(mload(s), 0x20))\n            }\n\n            // inputPtr used to point to start of inputNotes for proofOutputs[0]\n            // now we want inputPtr to point to start of inputNotes for proofOutputs[1]\n            // 1. length of proofOutput\n            // 2. length of outputNotes\n            // length of outputNotes = s - inputPtr, stored at inputPtr\n            mstore(notesPtr, sub(sub(s, notesPtr), 0x20)) // store length of outputNotes at start of outputNotes\n            // length of proofOutput\n            let proofOutputLength := sub(s, startOfProofOutput)\n            mstore(startOfProofOutput, sub(proofOutputLength, 0x20))\n            mstore(0x180, sub(s, 0x1a0)) // store length of proofOutputs at 0x100\n            mstore(0x160, 0x20)\n            return(0x160, sub(s, 0x160)) // return the final byte array\n        }\n    }\n}\n",
  "sourcePath": "@aztec/protocol/contracts/ACE/validators/joinSplitFluid/JoinSplitFluidABIEncoder.sol",
  "ast": {
    "absolutePath": "@aztec/protocol/contracts/ACE/validators/joinSplitFluid/JoinSplitFluidABIEncoder.sol",
    "exportedSymbols": {
      "JoinSplitFluidABIEncoder": [
        1761
      ]
    },
    "id": 1762,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1755,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:10"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1761,
        "linearizedBaseContracts": [
          1761
        ],
        "name": "JoinSplitFluidABIEncoder",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1759,
              "nodeType": "Block",
              "src": "751:13423:10",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 1758,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let notes := add(0x104, calldataload(0x144))\n    let n := calldataload(notes)\n    let inputOwners := add(0x124, calldataload(0x164))\n    let outputOwners := add(0x124, calldataload(0x184))\n    let metadata := add(0x144, calldataload(0x1a4))\n    mstore(0x1a0, 0x02)\n    mstore(0x1c0, 0x80)\n    mstore(0x220, 0xc0)\n    mstore(0x260, 0x00)\n    mstore(0x280, 0x00)\n    mstore(0x2a0, calldataload(0x124))\n    mstore(0x2e0, 0x01)\n    mstore(0x300, 0x60)\n    let metadataIndex := calldataload(metadata)\n    let metadataLength := calldataload(add(metadataIndex, sub(metadata, 0x40)))\n    mstore(0x00, 0x01)\n    calldatacopy(0x20, add(notes, 0x120), 0x80)\n    mstore(0x320, add(0xc0, metadataLength))\n    mstore(0x340, 0x01)\n    mstore(0x360, calldataload(outputOwners))\n    mstore(0x380, keccak256(0x00, 0xa0))\n    mstore(0x3a0, add(0x40, metadataLength))\n    mstore(0x3c0, or(mload(0x20), shl(255, and(mload(0x40), 0x01))))\n    mstore(0x3e0, or(mload(0x60), shl(255, and(mload(0x80), 0x01))))\n    calldatacopy(0x400, add(metadataIndex, sub(metadata, 0x20)), metadataLength)\n    mstore(0x240, add(0x200, metadataLength))\n    mstore(0x2c0, add(0x120, metadataLength))\n    mstore(add(0x400, metadataLength), 0x120)\n    mstore(add(0x420, metadataLength), 0x01)\n    mstore(add(0x440, metadataLength), 0x60)\n    calldatacopy(0x20, add(notes, 0x60), 0x80)\n    mstore(add(0x460, metadataLength), 0xc0)\n    mstore(add(0x480, metadataLength), 0x01)\n    mstore(add(0x4a0, metadataLength), calldataload(inputOwners))\n    mstore(add(0x4c0, metadataLength), keccak256(0x00, 0xa0))\n    mstore(add(0x4e0, metadataLength), 0x40)\n    mstore(add(0x500, metadataLength), or(mload(0x20), shl(255, and(mload(0x40), 0x01))))\n    mstore(add(0x520, metadataLength), or(mload(0x60), shl(255, and(mload(0x80), 0x01))))\n    mstore(add(0x440, metadataLength), 0x60)\n    let startOfProofOutput := add(0x540, metadataLength)\n    mstore(0x200, add(0x320, metadataLength))\n    mstore(0x1e0, add(0x3c0, metadataLength))\n    let s := startOfProofOutput\n    mstore(add(s, 0x20), 0xc0)\n    mstore(add(s, 0x40), 0x100)\n    mstore(add(s, 0x60), 0x00)\n    mstore(add(s, 0x80), 0x00)\n    mstore(0x20, calldataload(0x124))\n    mstore(add(s, 0xa0), keccak256(0x20, 0x20))\n    mstore(add(s, 0xc0), 0x20)\n    mstore(add(s, 0xe0), 0x00)\n    let notesPtr := add(s, 0x100)\n    mstore(add(notesPtr, 0x20), sub(n, 2))\n    s := add(add(s, 0x140), mul(0x20, sub(n, 2)))\n    for {\n        let i := 0x02\n    }\n    lt(i, n)\n    {\n        i := add(i, 0x01)\n    }\n    {\n        metadataIndex := calldataload(add(metadata, mul(sub(i, 0x01), 0x20)))\n        metadataLength := calldataload(add(sub(metadata, 0x40), metadataIndex))\n        mstore(0x00, 0x01)\n        calldatacopy(0x20, add(add(notes, 0x60), mul(i, 0xc0)), 0x80)\n        mstore(s, add(0xc0, metadataLength))\n        mstore(add(s, 0x20), 0x01)\n        mstore(add(s, 0x40), calldataload(add(outputOwners, mul(sub(i, 0x01), 0x20))))\n        mstore(add(s, 0x60), keccak256(0x00, 0xa0))\n        mstore(add(s, 0x80), add(0x40, metadataLength))\n        mstore(add(s, 0xa0), or(mload(0x20), shl(255, and(mload(0x40), 0x01))))\n        mstore(add(s, 0xc0), or(mload(0x60), shl(255, and(mload(0x80), 0x01))))\n        calldatacopy(add(s, 0xe0), add(metadataIndex, sub(metadata, 0x20)), metadataLength)\n        mstore(add(notesPtr, mul(i, 0x20)), sub(s, notesPtr))\n        s := add(s, add(mload(s), 0x20))\n    }\n    mstore(notesPtr, sub(sub(s, notesPtr), 0x20))\n    let proofOutputLength := sub(s, startOfProofOutput)\n    mstore(startOfProofOutput, sub(proofOutputLength, 0x20))\n    mstore(0x180, sub(s, 0x1a0))\n    mstore(0x160, 0x20)\n    return(0x160, sub(s, 0x160))\n}",
                  "src": "761:13413:10"
                }
              ]
            },
            "documentation": "Calldata map\n0x04:0x24      = calldata location of proofData byte array\n0x24:0x44      = message sender\n0x44:0x64      = h_x\n0x64:0x84      = h_y\n0x84:0xa4      = t2_x0\n0xa4:0xc4      = t2_x1\n0xc4:0xe4      = t2_y0\n0xe4:0x104     = t2_y1\n0x104:0x124    = length of proofData byte array\n0x124:0x144    = challenge\n0x144:0x164    = offset in byte array to notes\n0x164:0x184    = offset in byte array to inputOwners\n0x184:0x1a4    = offset in byte array to outputOwners\n0x1a4:0x1c4    = offset in byte array to metadata",
            "id": 1760,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "encodeAndExit",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1756,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "734:2:10"
            },
            "returnParameters": {
              "id": 1757,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "751:0:10"
            },
            "scope": 1761,
            "src": "712:13462:10",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 1762,
        "src": "33:14143:10"
      }
    ],
    "src": "0:14177:10"
  },
  "legacyAST": {
    "absolutePath": "@aztec/protocol/contracts/ACE/validators/joinSplitFluid/JoinSplitFluidABIEncoder.sol",
    "exportedSymbols": {
      "JoinSplitFluidABIEncoder": [
        1761
      ]
    },
    "id": 1762,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1755,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:10"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1761,
        "linearizedBaseContracts": [
          1761
        ],
        "name": "JoinSplitFluidABIEncoder",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1759,
              "nodeType": "Block",
              "src": "751:13423:10",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 1758,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let notes := add(0x104, calldataload(0x144))\n    let n := calldataload(notes)\n    let inputOwners := add(0x124, calldataload(0x164))\n    let outputOwners := add(0x124, calldataload(0x184))\n    let metadata := add(0x144, calldataload(0x1a4))\n    mstore(0x1a0, 0x02)\n    mstore(0x1c0, 0x80)\n    mstore(0x220, 0xc0)\n    mstore(0x260, 0x00)\n    mstore(0x280, 0x00)\n    mstore(0x2a0, calldataload(0x124))\n    mstore(0x2e0, 0x01)\n    mstore(0x300, 0x60)\n    let metadataIndex := calldataload(metadata)\n    let metadataLength := calldataload(add(metadataIndex, sub(metadata, 0x40)))\n    mstore(0x00, 0x01)\n    calldatacopy(0x20, add(notes, 0x120), 0x80)\n    mstore(0x320, add(0xc0, metadataLength))\n    mstore(0x340, 0x01)\n    mstore(0x360, calldataload(outputOwners))\n    mstore(0x380, keccak256(0x00, 0xa0))\n    mstore(0x3a0, add(0x40, metadataLength))\n    mstore(0x3c0, or(mload(0x20), shl(255, and(mload(0x40), 0x01))))\n    mstore(0x3e0, or(mload(0x60), shl(255, and(mload(0x80), 0x01))))\n    calldatacopy(0x400, add(metadataIndex, sub(metadata, 0x20)), metadataLength)\n    mstore(0x240, add(0x200, metadataLength))\n    mstore(0x2c0, add(0x120, metadataLength))\n    mstore(add(0x400, metadataLength), 0x120)\n    mstore(add(0x420, metadataLength), 0x01)\n    mstore(add(0x440, metadataLength), 0x60)\n    calldatacopy(0x20, add(notes, 0x60), 0x80)\n    mstore(add(0x460, metadataLength), 0xc0)\n    mstore(add(0x480, metadataLength), 0x01)\n    mstore(add(0x4a0, metadataLength), calldataload(inputOwners))\n    mstore(add(0x4c0, metadataLength), keccak256(0x00, 0xa0))\n    mstore(add(0x4e0, metadataLength), 0x40)\n    mstore(add(0x500, metadataLength), or(mload(0x20), shl(255, and(mload(0x40), 0x01))))\n    mstore(add(0x520, metadataLength), or(mload(0x60), shl(255, and(mload(0x80), 0x01))))\n    mstore(add(0x440, metadataLength), 0x60)\n    let startOfProofOutput := add(0x540, metadataLength)\n    mstore(0x200, add(0x320, metadataLength))\n    mstore(0x1e0, add(0x3c0, metadataLength))\n    let s := startOfProofOutput\n    mstore(add(s, 0x20), 0xc0)\n    mstore(add(s, 0x40), 0x100)\n    mstore(add(s, 0x60), 0x00)\n    mstore(add(s, 0x80), 0x00)\n    mstore(0x20, calldataload(0x124))\n    mstore(add(s, 0xa0), keccak256(0x20, 0x20))\n    mstore(add(s, 0xc0), 0x20)\n    mstore(add(s, 0xe0), 0x00)\n    let notesPtr := add(s, 0x100)\n    mstore(add(notesPtr, 0x20), sub(n, 2))\n    s := add(add(s, 0x140), mul(0x20, sub(n, 2)))\n    for {\n        let i := 0x02\n    }\n    lt(i, n)\n    {\n        i := add(i, 0x01)\n    }\n    {\n        metadataIndex := calldataload(add(metadata, mul(sub(i, 0x01), 0x20)))\n        metadataLength := calldataload(add(sub(metadata, 0x40), metadataIndex))\n        mstore(0x00, 0x01)\n        calldatacopy(0x20, add(add(notes, 0x60), mul(i, 0xc0)), 0x80)\n        mstore(s, add(0xc0, metadataLength))\n        mstore(add(s, 0x20), 0x01)\n        mstore(add(s, 0x40), calldataload(add(outputOwners, mul(sub(i, 0x01), 0x20))))\n        mstore(add(s, 0x60), keccak256(0x00, 0xa0))\n        mstore(add(s, 0x80), add(0x40, metadataLength))\n        mstore(add(s, 0xa0), or(mload(0x20), shl(255, and(mload(0x40), 0x01))))\n        mstore(add(s, 0xc0), or(mload(0x60), shl(255, and(mload(0x80), 0x01))))\n        calldatacopy(add(s, 0xe0), add(metadataIndex, sub(metadata, 0x20)), metadataLength)\n        mstore(add(notesPtr, mul(i, 0x20)), sub(s, notesPtr))\n        s := add(s, add(mload(s), 0x20))\n    }\n    mstore(notesPtr, sub(sub(s, notesPtr), 0x20))\n    let proofOutputLength := sub(s, startOfProofOutput)\n    mstore(startOfProofOutput, sub(proofOutputLength, 0x20))\n    mstore(0x180, sub(s, 0x1a0))\n    mstore(0x160, 0x20)\n    return(0x160, sub(s, 0x160))\n}",
                  "src": "761:13413:10"
                }
              ]
            },
            "documentation": "Calldata map\n0x04:0x24      = calldata location of proofData byte array\n0x24:0x44      = message sender\n0x44:0x64      = h_x\n0x64:0x84      = h_y\n0x84:0xa4      = t2_x0\n0xa4:0xc4      = t2_x1\n0xc4:0xe4      = t2_y0\n0xe4:0x104     = t2_y1\n0x104:0x124    = length of proofData byte array\n0x124:0x144    = challenge\n0x144:0x164    = offset in byte array to notes\n0x164:0x184    = offset in byte array to inputOwners\n0x184:0x1a4    = offset in byte array to outputOwners\n0x1a4:0x1c4    = offset in byte array to metadata",
            "id": 1760,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "encodeAndExit",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1756,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "734:2:10"
            },
            "returnParameters": {
              "id": 1757,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "751:0:10"
            },
            "scope": 1761,
            "src": "712:13462:10",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 1762,
        "src": "33:14143:10"
      }
    ],
    "src": "0:14177:10"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.4+commit.9549d8ff.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-09-07T20:01:54.426Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}