{
  "contractName": "SwapABIEncoder",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.5.4+commit.9549d8ff\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"AZTEC\",\"details\":\"Don't include this as an internal library. This contract uses a static memory table to cache elliptic curve primitives and hashes. Calling this internally from another function will lead to memory mutation and undefined behaviour. The intended use case is to call this externally via `staticcall`. External calls to OptimizedAZTEC can be treated as pure functions as this contract contains no storage and makes no external calls (other than to precompiles) Copyright Spilsbury Holdings Ltd 2019. All rights reserved.*\",\"methods\":{},\"title\":\"Library to ABI encode the output of a Swap proof verification\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aztec/protocol/contracts/ACE/validators/swap/SwapABIEncoder.sol\":\"SwapABIEncoder\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@aztec/protocol/contracts/ACE/validators/swap/SwapABIEncoder.sol\":{\"keccak256\":\"0x752233ffbfc5c5a42d4ab5b5e2aa307a72cfb2d98e82a86eaa01c932d62d0377\",\"urls\":[\"bzzr://01ecb245b5e443eb821d58debd3e2301df6eb21669564690e2ce2de083cffb38\"]}},\"version\":1}",
  "bytecode": "0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820a49a9c71d702201c5bd97f06d78c0eac70daef0a4321895f1e154af2584678f60029",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820a49a9c71d702201c5bd97f06d78c0eac70daef0a4321895f1e154af2584678f60029",
  "sourceMap": "675:26774:14:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24",
  "deployedSourceMap": "675:26774:14:-;;;;;;;;",
  "source": "pragma solidity >=0.5.0 <0.6.0;\n\n/**\n * @title Library to ABI encode the output of a Swap proof verification\n * @author AZTEC\n * @dev Don't include this as an internal library. This contract uses a static memory table to cache\n * elliptic curve primitives and hashes.\n * Calling this internally from another function will lead to memory mutation and undefined behaviour.\n * The intended use case is to call this externally via `staticcall`.\n * External calls to OptimizedAZTEC can be treated as pure functions as this contract contains no\n * storage and makes no external calls (other than to precompiles)\n * Copyright Spilsbury Holdings Ltd 2019. All rights reserved.\n **/\n\nlibrary SwapABIEncoder {\n\n    /**\n    * Calldata map\n    * 0x04:0x24      = calldata location of proofData byte array - pointer to the proofData.\n    * 0x24:0x44      = message sender // sender\n    * 0x44:0x64      = h_x     // crs\n    * 0x64:0x84      = h_y     // crs\n    * 0x84:0xa4      = t2_x0   // crs\n    * 0xa4:0xc4      = t2_x1   // crs\n    * 0xc4:0xe4      = t2_y0   // crs\n    * 0xe4:0x104     = t2_y1   // crs\n    * 0x104:0x124    = length of proofData byte array\n    * 0x124:0x144    = challenge\n    * 0x144:0x164    = offset in byte array to notes\n    * 0x164:0x184    = offset in byte array to inputOwners\n    * 0x184:0x1a4    = offset in byte array to outputOwners\n    * 0x1a4:0x1c4    = offset in byte array to metadata\n    **/\n\n    function encodeAndExit() internal pure {\n        assembly {\n            // set up initial variables\n            let notes := add(0x104, calldataload(0x144))\n            let noteOwners := add(0x124, calldataload(0x164)) // // one word after inputOwners = 1st\n            let metadataPtr := add(0x144, calldataload(0x184)) // two words after metadata = 1st\n\n            // First up, we need to do some checks to ensure we have been provided with correct data.\n            // We should only have 2 entries inside `bytes metadata` (only 2 output notes in total),\n            // and only 4 entries inside `noteOwners` (4 notes in a Swap proof)\n            if iszero(and(\n                eq(0x02, calldataload(sub(metadataPtr, 0x20))),\n                eq(0x04, calldataload(sub(noteOwners, 0x20)))\n            )) {\n                revert(0x00, 0x00) // no! bad! come back with good inputs!\n            }\n\n            // memory map of `proofOutputs`\n            // 0x00 - 0x160  = scratch data for note hash computation\n\n            // `returndata` starts at 0x160\n            // `proofOutputs` starts at 0x180\n            // 0x160 - 0x180 = relative offset in returndata to first bytes argument (0x20)\n            // 0x180 - 0x1a0 = byte length of `proofOutputs`\n            // 0x1a0 - 0x1c0 = number of `proofOutputs` entries (2)\n            // 0x1c0 - 0x1e0 = relative memory offset between `v` and start of `proofOutputs[0]` (0x80)\n            // 0x1e0 - 0x200 = relative memory offset between `v` and start of `proofOutputs[1]`\n\n            // `proofOutput` - t, starts at 0x200\n            // 0x200 - 0x220 = length of `proofOutput`\n            // 0x220 - 0x240 = relative offset between `t` and `inputNotes`\n            // 0x240 - 0x260 = relative offset between `t` and `outputNotes`\n            // 0x260 - 0x280 = `publicOwner`\n            // 0x280 - 0x2a0 = `publicValue`\n            // 0x2a0 - 0x2c0 = `challenge`\n\n            // `inputNotes` starts at 0x2c0\n            // structure of `inputNotes` and `outputNotes`\n            // 0x00 - 0x20 = byte length of notes array\n            // 0x20 - 0x40 = number of notes = 1\n            // 0x40 - 0x60 = offset to start of input note (0x60)\n\n            // structure of a `note`\n            // 0x00 - 0x20 = size of `note`\n            // 0x20 - 0x40 = `owner`\n            // 0x40 - 0x60 = `noteHash`\n            // 0x60 - 0x80 = size of note `data`\n            // 0x80 - 0xa0 = compressed note coordinate `gamma` (part of `data`)\n            // 0xa0 - 0xc0 = compressed note coordinate `sigma` (part of `data`)\n            // 0xc0 - ???? = remaining note metadata\n\n            // Note organisation...\n            // The Swap proof proves the following:\n            //   1. note[0].value == note[2].value\n            //   2. note[1].value == note[3].value\n            // In other words...\n            // note[0] = maker bid note\n            // note[1] = maker ask note\n            // note[2] = taker ask note\n            // note[3] = taker bid note\n\n            // We therefore have 2 balancing relationships\n            // 1. The maker bid note is destroyed and replaced with the taker ask note\n            // 2. The taker bid note is destroyed and replaced with the maker ask note\n\n            // Finally, we can translate this into 2 proofOutputs entries...\n            // In the first entry, `inputNotes` = [note[0]] and `outputNotes` = [note[2]]\n            // In the second entry, `inputNotes` = [note[3]] and `outputNotes` = [note[1]]\n\n            // `proofOutputs` must form a monolithic block of memory that we can return.\n            // `s` points to the memory location of the start of the current note\n            // `inputPtr` points to the start of the current `notes` dynamic bytes array\n\n            // length of proofOutputs is at 0x180\n\n            // we use memory from 0x00 - 0x140 as scratch memory\n\n            // return data starts at 0x160. As return data is `bytes proofOutputs`,\n            // the first word is the relative offset to the start of `proofOutputs` (i.e. 0x20)\n            mstore(0x160, 0x20)\n\n            /**\n            * Encoding of proofOutputs\n            * abi encoding of proofOutputs\n            * 0x00 : 0x20 = byte length of `proofOutputs` = 0x60 + L1 + L2\n            * 0x20 : 0x40 = number of `proofOutputs` entries (2)\n            * 0x40 : 0x60 = relative memory offset between `v` and start of `proofOutputs[0]` (0x80)\n            * 0x60 : 0x80 = relative memory offset between `v` and start of `proofOutputs[1]`\n            * 0x80 : 0x80 + L1    = start of proofOutputs[0]\n            * 0x80 + L1   : 0x80 + L1 + L2 = start of proofOutputs[1]\n            **/\n\n            // 0x180 stores the total size of `bytes proofOutputs`. We don't know that yet, so leave blank\n\n            // 0x1a0 = number of proof outputs (2)\n            mstore(0x1a0, 0x02)                            // number of proofs\n\n            // 0x1c0 = relative offset to 1st entry (0x80, 4 words)\n            mstore(0x1c0, 0x80)                            // offset to 1st proof\n\n            /**\n            * Encoding of proofOutput\n            * 0x00 : 0x20 = byte length of `proofOutput` = 0x60 + L1 + L2\n            * 0x20 : 0x40 = relative offset to `bytes inputNotes`\n            * 0x40 : 0x60 = relative offset to `bytes outputNotes`\n            * 0x60 : 0x80 = publicOwner\n            * 0x80 : 0xa0 = publicValue\n            * 0xa0 : 0xc0 = challenge\n            * 0xc0 : 0xc0 + L1 = `bytes inputNotes` (L1 = 0x140 bytes)\n            * 0xc0 + L1 : 0xc0 + L1 + L2 = `bytes inputNotes`\n            *\n            * Start of proofOutput = 0x200\n            **/\n\n            // length of proofOutput is at 0x200. We don't know that yet, so leave blank\n\n            // relative offset to inputNotes = 0xc0 (6 words)\n            mstore(0x220, 0xc0)                            // location of inputNotes\n\n            // we know that inputNotes has 1 entry, and input notes don't have metadata.\n            // So we actually know the complete size of `bytes inputNotes`\n            // (it's 0x140 bytes, we'll get to that in a bit)\n            // => relative offset to outputNotes = 0x140 + 0xc0 = 0x200\n            mstore(0x240, 0x200)                           // location of outputNotes\n\n            // Swap proof hardcodes `publicOwner` and `publicValue` to 0 (no public tokens)\n            mstore(0x260, 0x00)                             // publicOwner\n            mstore(0x280, 0x00)                             // publicValue\n            mstore(0x2a0, calldataload(0x124))              // challenge\n            /**\n            * Encoding of inputNotes\n            * 0x00 : 0x20 = byte length of `inputNotes` (0x120)\n            * 0x20 : 0x40 = number of input notes (0x01)\n            * 0x40 : 0x60 = relative offset to 1st input note (0x60)\n            * 0x60 : L    = 1st input note data (L = 0xe0)\n            *\n            * Start of inputNotes = 0x2a0\n            * Because we only have 1 note in this array, and that note has no metadata\n            * we know that the size of the note is 0xe0 bytes\n            * therefore, the size of inputNotes = 0xe0 + 3 words = 0x140 bytes.\n            * We store the byte length as 0x120 bytes because the length parameter\n            * of a dynamic bytes array does not include itself in the length calculation\n            **/\n\n            // 0x2c0 = length of inputNotes = 0x120\n            mstore(0x2c0, 0x120)\n\n            // 0x2e0 = number of notes (1)\n            mstore(0x2e0, 0x01) // 1 input note\n\n            // 0x300 = relative offset to input note (0x60)\n            mstore(0x300, 0x60) // relative offset to note data\n\n            /**\n            * Encoding of input note\n            * 0x00 : 0x20 = byte length of note (0xc0)\n            * 0x20 : 0x40 = note type (UXTO type = 0x01)\n            * 0x40 : 0x60 = note owner\n            * 0x60 : 0x80 = note hash\n            * 0x80 : 0xa0 = note data length (0x40)\n            * 0xa0 : 0xc0 = note coordinate 'gamma' (compressed)\n            * 0xc0 : 0xe0 = note coordinate 'sigma' (compressed)\n            *\n            * Start of note = 0x320\n            * The size of this note = 0xe0 bytes, so we store 0xc0 in the length parameter\n            **/\n\n            // we use memory from 0x00 - 0xa0 as scratch memory to compute note hash\n            // Note hash = keccak256(abi.encode(noteType, gammaX, gammaY, sigmaX, sigmaY))\n            mstore(0x00, 0x01) // store noteType at 0x01\n\n            // We want to copy note coordinate data into memory from 0x20 - 0xa0\n            // 'notes' points to the start of the notes array\n            // i.e. notes + 0x20 will point to the start of the data of the first entry\n            // first two entries are \\bar{k} and \\bar{a}, which we wish to skip over\n            // input note is notes[0] => we need to point to notes + 0x60\n            calldatacopy(0x20, add(notes, 0x60), 0x80) // copy gamma, sigma into 0x20 - 0xa0\n\n            // 0x320 = length of note (0xc0)\n            mstore(0x320, 0xc0)\n\n            // 0x340 = note type (UXTO type, 0x01)\n            mstore(0x340, 0x01) // note type\n\n            // 0x360 = note owners. We want the 1st entry in `noteOwners` (calldataload(noteOwners))\n            mstore(0x360, calldataload(noteOwners)) // note owner\n\n            // 0x380 = note hash, which is the hash of memory from 0x00 - 0xa0\n            mstore(0x380, keccak256(0x00, 0xa0)) // note hash\n\n            // 0x3a0 = noteData length (0x40, no metadata)\n            mstore(0x3a0, 0x40)\n\n            // We now need to store compressed note coordinates.\n            // We store them in compressed form, as this stuff will be emitted as an event and is not required\n            // for additional smart contract logic. Compressing reduces the event data size and saves a fair bit of gas\n\n            // To compress, we determine if the y-coordinate is odd.\n            // If it is, we set the 256th bit of the x-coordinate to 'true'.\n            // bn128 field elements are only 254 bits long, so we know that we won't override x-coordinate data\n            // (we already have the note coords in memory, so we load from memory instead of calldata)\n\n            // 0x3c0 = gamma\n            mstore(\n                0x3c0,\n                or(\n                    mload(0x20), // load x coordinate\n                    mul(         // multiply by (y & 1 ? 2^255 : 0)\n                        and(mload(0x40), 0x01),\n                        0x8000000000000000000000000000000000000000000000000000000000000000\n                    )\n                )\n            )\n\n            // 0x3e0 = sigma\n            mstore(\n                0x3e0,\n                or(\n                    mload(0x60),\n                    mul(\n                    and(mload(0x80), 0x01),\n                    0x8000000000000000000000000000000000000000000000000000000000000000\n                    )\n                )\n            )\n\n            /**\n            * Encoding of output notes\n            *\n            * abi format is identical to input notes, but now we don't know the total size\n            * (because of variable length metadata)\n            * 0x00 : 0x20 = byte length of `outputNotes` (0x40 + L)\n            * 0x20 : 0x40 = number of output notes (0x01)\n            * 0x40 : 0x60 = relative offset to 1st output note (0x60)\n            * 0x60 : 0x60 + L    = 1st output note data\n            *\n            * Start of outputNotes = 0x400\n            **/\n\n            // 0x400 = byte length of output notes. We don't know what this is so leave blank for now\n\n            // 0x420 = number of output notes (0x01)\n            mstore(0x420, 0x01)\n\n            // 0x440 = relative offset to output note data (0x60)\n            mstore(0x440, 0x60)\n\n            /**\n            * Encoding of output note\n            * 0x00 : 0x20 = byte length of note (0xc0 + L)\n            * 0x20 : 0x40 = note type (UXTO type = 0x01)\n            * 0x40 : 0x60 = note owner\n            * 0x60 : 0x80 = note hash\n            * 0x80 : 0xa0 = note data length (0x40 + L)\n            * 0xa0 : 0xc0 = note coordinate 'gamma' (compressed)\n            * 0xc0 : 0xe0 = note coordinate 'sigma' (compressed)\n            * 0xe0 : 0xe0 + L = note metadata\n            *\n            * Start of note = 0x460\n            * The size of this note = 0xe0 bytes, so we store 0xc0 in the length parameter\n            **/\n\n            // next, copy note coordinates into memory to compute hash.\n            // We already stored the noteType at position 0x00, no need to do that again\n            // We need to copy data from notes[2].\n            // 1. notes + 0x20 = start of 1st entry data\n            // 2. size of a note entry = 0xc0 bytes\n            // 3. we want to point to 3rd word in our note entry, to skip over \\bar{k}, \\bar{a}\n            //    (i.e. add 0x40 to caldlata pointer)\n            // => offset = notes + 0x20 + 0x40 + (0xc0 * 2) = notes + 0x1e0\n            // => calldata pointer = notes + 0x1e0\n            calldatacopy(0x20, add(notes, 0x1e0), 0x80) // get gamma, sigma\n\n            // 0x460 = byte length of output note. Leave blank for now\n\n            // 0x480 = note type (0x01)\n            mstore(0x480, 0x01)      // note type\n\n            // 0x4a0 = note owner. We are accessing `notes[2]`, therefore\n            // the note owner = noteOwners[2].\n            // i.e. noteOwners + 0x40\n            mstore(0x4a0, calldataload(add(noteOwners, 0x40))) // note owner\n\n            // 0x4c0 = note hash\n            mstore(0x4c0, keccak256(0x00, 0xa0))\n\n            // 0x4e0 = noteData length. To get this, we need to identify our metadata length\n            // `metadataPtr` points to the relative offset, in the `metadata` array, to the first metadata entry\n            // ABI encoding of the input data should encode 2 metadata entries.\n            // => relative offset to this note's metadata = `calldataload(metadataPtr)`\n            let metadataIndex := calldataload(metadataPtr)\n\n            // To convert this into a calldata offset, we must add the number of bytes of calldata\n            // that preceeds the start of the `metadata` array.\n\n            // `bytes metadata` abi encoding:\n            // 0x00 : 0x20 = size of bytes array\n            // 0x20 : 0x40 = number of metadata entries (i)\n            // 0x40 : 0x40 + (0x20 * j) = relative offsets to each metadata entry\n            // 0x40 + (0x20 * j) : ??? = metadata entries\n\n            // The `metadata` pointer points to the 3rd word (at 0x40), the 1st relative offset\n            // Therefore, to compute the calldata offset to the metadata entry,\n            // we need to add `metadataPtr - 0x40` to `calldataload(metadataPtr)`.\n            // i.e. metadataCalldataPtr = calldataload(add(sub(metadataPtr, 0x40), metadataIndex))\n\n            // Because each metadata entry is itself a dynamic bytes array, the first word will\n            // be the length of the metadata entry. This is what we want, so we directly call\n            // `calldataload` on our offset\n            let metadataLength := calldataload(add(sub(metadataPtr, 0x40), metadataIndex))\n\n            // 0x4e0 = noteData length = 0x40 + metadata length\n            mstore(0x4e0, add(0x40, metadataLength))\n\n            // 0x500 = compressed note coordinate gamma\n            mstore(\n                0x500,\n                or(\n                    mload(0x20),\n                    mul(\n                        and(mload(0x40), 0x01),\n                        0x8000000000000000000000000000000000000000000000000000000000000000\n                    )\n                )\n            )\n\n            // 0x520 = compressed note coordinate sigma\n            mstore(\n                0x520,\n                or(\n                    mload(0x60),\n                    mul(\n                        and(mload(0x80), 0x01),\n                        0x8000000000000000000000000000000000000000000000000000000000000000\n                    )\n                )\n            )\n\n            // To complete `noteData`, we need to copy note metadata into memory (0x540)\n            // We know that metadataIndex + metadataPtr - 0x40 points to the start of the metadata entry in calldata.\n            // But the first word is the length of the metadata entry, which we don't want.\n            // So we need to point to the second word (the byte array data).\n            // i.e. we want to start copying at (metadataIndex + metadataPtr - 0x20)\n            // and we want to copy `metadataLength` number of bytes.\n            calldatacopy(0x540, add(metadataIndex, sub(metadataPtr, 0x20)), metadataLength)\n\n            // We now need to work backwards and fill in the parts of `bytes proofOutput` that we left blank,\n            // as we now can identify the size of the array\n\n            // 0x460 points to the size of the output note. The actual size is 0xe0 + metadataLength.\n            // So we record 0xc0 + metadataLength\n            // (because the 'size' of a byte array does not take into account the word needed to record the size)\n            mstore(0x460, add(0xc0, metadataLength))  // update size of note\n\n            // 0x400 = the size of `bytes outputNotes`.\n            // Raw size = 0x140 + metadataLength, so record 0x120 + metadataLength\n            mstore(0x400, add(0x120, metadataLength)) // update size of outputNotes\n\n            // 0x200 = the size of `bytes proofOutput`\n            // Raw size = 0x340 + metadataLength, so record 0x340 + metadataLength\n            mstore(0x200, add(0x320, metadataLength))\n\n            // Great! We've now finished writing the 1st proof output.\n            // We now need to write the ABI encoding of the 2nd proof output entry.\n\n            // 0x1e0 points to the relative offset in `bytes proofOutputs` to the second proof entry.\n            // This will be equal to the size of the 1st proof, plus the 0x80 preceeding bytes\n            // that are used to record `bytes proofOutputs`\n            // i.e. relative offset = 0x340 + 0x80 + metadataLength = 0x3c0 + metadataLength\n            mstore(0x1e0, add(0x3c0, metadataLength))\n\n            /**\n            * proofOutput[1]\n            **/\n\n            // When writing data into proofOutputs[1], we cannot use an absolute offset as\n            // metadataLength is not known at compile time.\n            // `proofPtr` points to the start of `proofOutputs[1]`\n            let proofPtr := add(0x540, metadataLength)\n\n            // (proofPtr) = size of proofOutput (leave blank for now)\n\n            // (proofPtr + 0x20) = offset to inputNotes (0xc0)\n            mstore(add(proofPtr, 0x20), 0xc0)\n\n            // (proofPtr + 0x40) = offset to outputNotes (0x200)\n            mstore(add(proofPtr, 0x40), 0x200)\n\n            // (proofPtr + 0x60) = publicOwner (0)\n            mstore(add(proofPtr, 0x60), 0x00) // publicOwner\n\n            // (proofPtr + 0x80) = publicValue (0)\n            mstore(add(proofPtr, 0x80), 0x00) // publicValue\n\n            // (proofPtr + 0xa0) = challenge\n            // we hash the challenge to get the second proof output's challenge - to preserve uniqueness\n            mstore(0xe0, calldataload(0x124))\n            mstore(add(proofPtr, 0xa0), keccak256(0xe0, 0x20)) // challenge\n\n            /**\n            * proofOutput[1].inputNotes\n            *\n            * starts at (proofPtr + 0xc0)\n            **/\n\n            // (proofPtr + 0xc0) = byte size of inputNotes (0x120)\n            mstore(add(proofPtr, 0xc0), 0x120)\n\n            // (proofPtr + 0xe0) = number of input notes (0x01)\n            mstore(add(proofPtr, 0xe0), 0x01)\n\n            // (proofPtr + 0x100) = relative offset to input note data (0x60)\n            mstore(add(proofPtr, 0x100), 0x60)\n\n            /**\n            * proofOutput[1].inputNotes[0]\n            *\n            * starts at (proofPtr + 0x120)\n            **/\n\n            // input note = notes[3]\n            // => offset = notes + 0x60 + (0xc0 * 3) = notes + 0x2a0\n            // copy note data into scratch memory to hash\n            calldatacopy(0x20, add(notes, 0x2a0), 0x80)\n\n            // (proofPtr + 0x120) = byte length of input note (0xc0)\n            mstore(add(proofPtr, 0x120), 0xc0) // length of input note\n\n            // (proofPtr + 0x140) = note type (UXTO type, 0x01)\n            mstore(add(proofPtr, 0x140), 0x01) // note type\n\n            // (proofPtr + 0x160) = note owner = noteOwners[3]\n            mstore(add(proofPtr, 0x160), calldataload(add(noteOwners, 0x60))) // note owner\n\n            // (proofPtr + 0x180) = note hash\n            mstore(add(proofPtr, 0x180), keccak256(0x00, 0xa0)) // note hash\n\n            // (proofPtr + 0x1a0) = noteData length (0x40 bytes)\n            mstore(add(proofPtr, 0x1a0), 0x40)\n\n            // (proofPtr + 0x1c0) = compressed coordinate 'gamma'\n            mstore(\n                add(proofPtr, 0x1c0),\n                or(\n                    mload(0x20),\n                    mul(\n                        and(mload(0x40), 0x01),\n                        0x8000000000000000000000000000000000000000000000000000000000000000\n                    )\n                )\n            )\n\n            // (proofPtr + 0x1e0) = compressed coordinate 'sigma'\n            mstore(\n                add(proofPtr, 0x1e0),\n                or(\n                    mload(0x60),\n                    mul(\n                        and(mload(0x80), 0x01),\n                        0x8000000000000000000000000000000000000000000000000000000000000000\n                    )\n                )\n            )\n\n            /**\n            * proofOutput[1].outputNotes\n            *\n            * starts at (proofPtr + 0x200)\n            **/\n\n            // (proofPtr + 0x200) = byte length of output notes, leave blank for now\n\n            // (proofPtr + 0x220) = number of output notes (0x01)\n            mstore(add(proofPtr, 0x220), 0x01)\n\n            // (proofPtr + 0x240) = offset to output notes (0x60)\n            mstore(add(proofPtr, 0x240), 0x60)\n\n            /**\n            * proofOutput[1].outputNotes[0]\n            *\n            * starts at (proofPtr + 0x260)\n            **/\n            // output note = notes[1]\n            // => offset = notes + 0x60 + 0xc0 = notes + 0x120\n            // copy note data into scratch memory to hash\n            calldatacopy(0x20, add(notes, 0x120), 0x80)\n\n            // (proofPtr + 0x260) = length of note, leave blank for now\n\n            // (proofPtr + 0x280) = note type (UXTO type, 0x01)\n            mstore(add(proofPtr, 0x280), 0x01) // note type\n\n            // (proofPtr + 0x2a0) = note owner (noteOwners[1])\n            mstore(add(proofPtr, 0x2a0), calldataload(add(noteOwners, 0x20)))\n\n            // (proofPtr + 0x2c0) = note hash\n            mstore(add(proofPtr, 0x2c0), keccak256(0x00, 0xa0))\n\n            // We now need to compute the metadata length. We want to access the 2nd metadata entry,\n            // at (metadataPtr + 0x20)\n            metadataIndex := calldataload(add(metadataPtr, 0x20))\n            metadataLength := calldataload(add(sub(metadataPtr, 0x40), metadataIndex))\n\n            // (proofPtr + 0x2e0) = noteData length (0x40 + metadataLength)\n            mstore(add(proofPtr, 0x2e0), add(0x40, metadataLength))\n\n            // (proofPtr + 0x300) = compressed coordinate 'gamma'\n            mstore(\n                add(proofPtr, 0x300),\n                or(\n                    mload(0x20),\n                    mul(\n                        and(mload(0x40), 0x01),\n                        0x8000000000000000000000000000000000000000000000000000000000000000\n                    )\n                )\n            )\n\n            // (proofPtr + 0x320) = compressed coordinate 'sigma'\n            mstore(\n                add(proofPtr, 0x320),\n                or(\n                    mload(0x60),\n                    mul(\n                        and(mload(0x80), 0x01),\n                        0x8000000000000000000000000000000000000000000000000000000000000000\n                    )\n                )\n            )\n\n            // (proofPtr + 0x340) = start of note metadata\n            calldatacopy(add(proofPtr, 0x340), add(metadataIndex, sub(metadataPtr, 0x20)), metadataLength)\n\n            // Next, work backwards and fill in the remaining gaps\n            // (proofPtr + 0x260) = proofOutputs[1].outputNotes[0].length (0xc0 + metadataLength)\n            mstore(add(proofPtr, 0x260), add(0xc0, metadataLength))\n\n            // (proofPtr + 0x200) = proofOutputs[1].outputNotes.length (0x120 + metadataLength)\n            mstore(add(proofPtr, 0x200), add(0x120, metadataLength))\n\n            // (proofPtr) = proofOutputs[1].length = (0x320 + metadataLength)\n            mstore(proofPtr, add(0x320, metadataLength))\n\n            // (0x180) = proofOutputs.length\n            // We previously stored proofOutputs[0].length at 0x200\n            // Total length = combination of\n            // 1. proofOutputs[0].length + 0x20 (extra word because of length variable)\n            // 2. proofOutputs[1].length + 0x20 (^^)\n            // 3. data to record relative offsets (0x20 * number of outputs) = (0x40)\n            // 4. data to record number of entries (0x20)\n\n            // We stored proofOutputs[0].length at 0x200\n            // and we know that proofOutputs[1].length = 0x320 + metadataLength\n            // => length = mload(0x200) + metadataLength + 0x320 + 0x40 + 0x40 + 0x20\n            // => length = mload(0x200) + metadataLength + 0x3c0\n            mstore(0x180, add(add(0x3c0, metadataLength), mload(0x200)))\n\n            // Great, we've done it! Now all that is left is to return from this transaction.\n            // Our return data starts at 0x160.\n            // Total size of `bytes proofOutpust` = proofOutputs.length + 0x20\n            // We need 1 extra word (at 0x160) for the relative offset to get to `bytes proofOutputs`\n            // => returndata size = proofOutputs.length + 0x40\n            // = mload(0x180) + 0x40\n            return(0x160, add(mload(0x180), 0x40)) // *kazoo noises*\n        }\n    }\n}\n",
  "sourcePath": "@aztec/protocol/contracts/ACE/validators/swap/SwapABIEncoder.sol",
  "ast": {
    "absolutePath": "@aztec/protocol/contracts/ACE/validators/swap/SwapABIEncoder.sol",
    "exportedSymbols": {
      "SwapABIEncoder": [
        1806
      ]
    },
    "id": 1807,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1800,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:14"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": "@title Library to ABI encode the output of a Swap proof verification\n@author AZTEC\n@dev Don't include this as an internal library. This contract uses a static memory table to cache\nelliptic curve primitives and hashes.\nCalling this internally from another function will lead to memory mutation and undefined behaviour.\nThe intended use case is to call this externally via `staticcall`.\nExternal calls to OptimizedAZTEC can be treated as pure functions as this contract contains no\nstorage and makes no external calls (other than to precompiles)\nCopyright Spilsbury Holdings Ltd 2019. All rights reserved.*",
        "fullyImplemented": true,
        "id": 1806,
        "linearizedBaseContracts": [
          1806
        ],
        "name": "SwapABIEncoder",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1804,
              "nodeType": "Block",
              "src": "1464:25983:14",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 1803,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let notes := add(0x104, calldataload(0x144))\n    let noteOwners := add(0x124, calldataload(0x164))\n    let metadataPtr := add(0x144, calldataload(0x184))\n    if iszero(and(eq(0x02, calldataload(sub(metadataPtr, 0x20))), eq(0x04, calldataload(sub(noteOwners, 0x20)))))\n    {\n        revert(0x00, 0x00)\n    }\n    mstore(0x160, 0x20)\n    mstore(0x1a0, 0x02)\n    mstore(0x1c0, 0x80)\n    mstore(0x220, 0xc0)\n    mstore(0x240, 0x200)\n    mstore(0x260, 0x00)\n    mstore(0x280, 0x00)\n    mstore(0x2a0, calldataload(0x124))\n    mstore(0x2c0, 0x120)\n    mstore(0x2e0, 0x01)\n    mstore(0x300, 0x60)\n    mstore(0x00, 0x01)\n    calldatacopy(0x20, add(notes, 0x60), 0x80)\n    mstore(0x320, 0xc0)\n    mstore(0x340, 0x01)\n    mstore(0x360, calldataload(noteOwners))\n    mstore(0x380, keccak256(0x00, 0xa0))\n    mstore(0x3a0, 0x40)\n    mstore(0x3c0, or(mload(0x20), mul(and(mload(0x40), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    mstore(0x3e0, or(mload(0x60), mul(and(mload(0x80), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    mstore(0x420, 0x01)\n    mstore(0x440, 0x60)\n    calldatacopy(0x20, add(notes, 0x1e0), 0x80)\n    mstore(0x480, 0x01)\n    mstore(0x4a0, calldataload(add(noteOwners, 0x40)))\n    mstore(0x4c0, keccak256(0x00, 0xa0))\n    let metadataIndex := calldataload(metadataPtr)\n    let metadataLength := calldataload(add(sub(metadataPtr, 0x40), metadataIndex))\n    mstore(0x4e0, add(0x40, metadataLength))\n    mstore(0x500, or(mload(0x20), mul(and(mload(0x40), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    mstore(0x520, or(mload(0x60), mul(and(mload(0x80), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    calldatacopy(0x540, add(metadataIndex, sub(metadataPtr, 0x20)), metadataLength)\n    mstore(0x460, add(0xc0, metadataLength))\n    mstore(0x400, add(0x120, metadataLength))\n    mstore(0x200, add(0x320, metadataLength))\n    mstore(0x1e0, add(0x3c0, metadataLength))\n    let proofPtr := add(0x540, metadataLength)\n    mstore(add(proofPtr, 0x20), 0xc0)\n    mstore(add(proofPtr, 0x40), 0x200)\n    mstore(add(proofPtr, 0x60), 0x00)\n    mstore(add(proofPtr, 0x80), 0x00)\n    mstore(0xe0, calldataload(0x124))\n    mstore(add(proofPtr, 0xa0), keccak256(0xe0, 0x20))\n    mstore(add(proofPtr, 0xc0), 0x120)\n    mstore(add(proofPtr, 0xe0), 0x01)\n    mstore(add(proofPtr, 0x100), 0x60)\n    calldatacopy(0x20, add(notes, 0x2a0), 0x80)\n    mstore(add(proofPtr, 0x120), 0xc0)\n    mstore(add(proofPtr, 0x140), 0x01)\n    mstore(add(proofPtr, 0x160), calldataload(add(noteOwners, 0x60)))\n    mstore(add(proofPtr, 0x180), keccak256(0x00, 0xa0))\n    mstore(add(proofPtr, 0x1a0), 0x40)\n    mstore(add(proofPtr, 0x1c0), or(mload(0x20), mul(and(mload(0x40), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    mstore(add(proofPtr, 0x1e0), or(mload(0x60), mul(and(mload(0x80), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    mstore(add(proofPtr, 0x220), 0x01)\n    mstore(add(proofPtr, 0x240), 0x60)\n    calldatacopy(0x20, add(notes, 0x120), 0x80)\n    mstore(add(proofPtr, 0x280), 0x01)\n    mstore(add(proofPtr, 0x2a0), calldataload(add(noteOwners, 0x20)))\n    mstore(add(proofPtr, 0x2c0), keccak256(0x00, 0xa0))\n    metadataIndex := calldataload(add(metadataPtr, 0x20))\n    metadataLength := calldataload(add(sub(metadataPtr, 0x40), metadataIndex))\n    mstore(add(proofPtr, 0x2e0), add(0x40, metadataLength))\n    mstore(add(proofPtr, 0x300), or(mload(0x20), mul(and(mload(0x40), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    mstore(add(proofPtr, 0x320), or(mload(0x60), mul(and(mload(0x80), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    calldatacopy(add(proofPtr, 0x340), add(metadataIndex, sub(metadataPtr, 0x20)), metadataLength)\n    mstore(add(proofPtr, 0x260), add(0xc0, metadataLength))\n    mstore(add(proofPtr, 0x200), add(0x120, metadataLength))\n    mstore(proofPtr, add(0x320, metadataLength))\n    mstore(0x180, add(add(0x3c0, metadataLength), mload(0x200)))\n    return(0x160, add(mload(0x180), 0x40))\n}",
                  "src": "1474:25973:14"
                }
              ]
            },
            "documentation": "Calldata map\n0x04:0x24      = calldata location of proofData byte array - pointer to the proofData.\n0x24:0x44      = message sender // sender\n0x44:0x64      = h_x     // crs\n0x64:0x84      = h_y     // crs\n0x84:0xa4      = t2_x0   // crs\n0xa4:0xc4      = t2_x1   // crs\n0xc4:0xe4      = t2_y0   // crs\n0xe4:0x104     = t2_y1   // crs\n0x104:0x124    = length of proofData byte array\n0x124:0x144    = challenge\n0x144:0x164    = offset in byte array to notes\n0x164:0x184    = offset in byte array to inputOwners\n0x184:0x1a4    = offset in byte array to outputOwners\n0x1a4:0x1c4    = offset in byte array to metadata*",
            "id": 1805,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "encodeAndExit",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1801,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1447:2:14"
            },
            "returnParameters": {
              "id": 1802,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1464:0:14"
            },
            "scope": 1806,
            "src": "1425:26022:14",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 1807,
        "src": "675:26774:14"
      }
    ],
    "src": "0:27450:14"
  },
  "legacyAST": {
    "absolutePath": "@aztec/protocol/contracts/ACE/validators/swap/SwapABIEncoder.sol",
    "exportedSymbols": {
      "SwapABIEncoder": [
        1806
      ]
    },
    "id": 1807,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1800,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:14"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": "@title Library to ABI encode the output of a Swap proof verification\n@author AZTEC\n@dev Don't include this as an internal library. This contract uses a static memory table to cache\nelliptic curve primitives and hashes.\nCalling this internally from another function will lead to memory mutation and undefined behaviour.\nThe intended use case is to call this externally via `staticcall`.\nExternal calls to OptimizedAZTEC can be treated as pure functions as this contract contains no\nstorage and makes no external calls (other than to precompiles)\nCopyright Spilsbury Holdings Ltd 2019. All rights reserved.*",
        "fullyImplemented": true,
        "id": 1806,
        "linearizedBaseContracts": [
          1806
        ],
        "name": "SwapABIEncoder",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1804,
              "nodeType": "Block",
              "src": "1464:25983:14",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 1803,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let notes := add(0x104, calldataload(0x144))\n    let noteOwners := add(0x124, calldataload(0x164))\n    let metadataPtr := add(0x144, calldataload(0x184))\n    if iszero(and(eq(0x02, calldataload(sub(metadataPtr, 0x20))), eq(0x04, calldataload(sub(noteOwners, 0x20)))))\n    {\n        revert(0x00, 0x00)\n    }\n    mstore(0x160, 0x20)\n    mstore(0x1a0, 0x02)\n    mstore(0x1c0, 0x80)\n    mstore(0x220, 0xc0)\n    mstore(0x240, 0x200)\n    mstore(0x260, 0x00)\n    mstore(0x280, 0x00)\n    mstore(0x2a0, calldataload(0x124))\n    mstore(0x2c0, 0x120)\n    mstore(0x2e0, 0x01)\n    mstore(0x300, 0x60)\n    mstore(0x00, 0x01)\n    calldatacopy(0x20, add(notes, 0x60), 0x80)\n    mstore(0x320, 0xc0)\n    mstore(0x340, 0x01)\n    mstore(0x360, calldataload(noteOwners))\n    mstore(0x380, keccak256(0x00, 0xa0))\n    mstore(0x3a0, 0x40)\n    mstore(0x3c0, or(mload(0x20), mul(and(mload(0x40), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    mstore(0x3e0, or(mload(0x60), mul(and(mload(0x80), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    mstore(0x420, 0x01)\n    mstore(0x440, 0x60)\n    calldatacopy(0x20, add(notes, 0x1e0), 0x80)\n    mstore(0x480, 0x01)\n    mstore(0x4a0, calldataload(add(noteOwners, 0x40)))\n    mstore(0x4c0, keccak256(0x00, 0xa0))\n    let metadataIndex := calldataload(metadataPtr)\n    let metadataLength := calldataload(add(sub(metadataPtr, 0x40), metadataIndex))\n    mstore(0x4e0, add(0x40, metadataLength))\n    mstore(0x500, or(mload(0x20), mul(and(mload(0x40), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    mstore(0x520, or(mload(0x60), mul(and(mload(0x80), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    calldatacopy(0x540, add(metadataIndex, sub(metadataPtr, 0x20)), metadataLength)\n    mstore(0x460, add(0xc0, metadataLength))\n    mstore(0x400, add(0x120, metadataLength))\n    mstore(0x200, add(0x320, metadataLength))\n    mstore(0x1e0, add(0x3c0, metadataLength))\n    let proofPtr := add(0x540, metadataLength)\n    mstore(add(proofPtr, 0x20), 0xc0)\n    mstore(add(proofPtr, 0x40), 0x200)\n    mstore(add(proofPtr, 0x60), 0x00)\n    mstore(add(proofPtr, 0x80), 0x00)\n    mstore(0xe0, calldataload(0x124))\n    mstore(add(proofPtr, 0xa0), keccak256(0xe0, 0x20))\n    mstore(add(proofPtr, 0xc0), 0x120)\n    mstore(add(proofPtr, 0xe0), 0x01)\n    mstore(add(proofPtr, 0x100), 0x60)\n    calldatacopy(0x20, add(notes, 0x2a0), 0x80)\n    mstore(add(proofPtr, 0x120), 0xc0)\n    mstore(add(proofPtr, 0x140), 0x01)\n    mstore(add(proofPtr, 0x160), calldataload(add(noteOwners, 0x60)))\n    mstore(add(proofPtr, 0x180), keccak256(0x00, 0xa0))\n    mstore(add(proofPtr, 0x1a0), 0x40)\n    mstore(add(proofPtr, 0x1c0), or(mload(0x20), mul(and(mload(0x40), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    mstore(add(proofPtr, 0x1e0), or(mload(0x60), mul(and(mload(0x80), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    mstore(add(proofPtr, 0x220), 0x01)\n    mstore(add(proofPtr, 0x240), 0x60)\n    calldatacopy(0x20, add(notes, 0x120), 0x80)\n    mstore(add(proofPtr, 0x280), 0x01)\n    mstore(add(proofPtr, 0x2a0), calldataload(add(noteOwners, 0x20)))\n    mstore(add(proofPtr, 0x2c0), keccak256(0x00, 0xa0))\n    metadataIndex := calldataload(add(metadataPtr, 0x20))\n    metadataLength := calldataload(add(sub(metadataPtr, 0x40), metadataIndex))\n    mstore(add(proofPtr, 0x2e0), add(0x40, metadataLength))\n    mstore(add(proofPtr, 0x300), or(mload(0x20), mul(and(mload(0x40), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    mstore(add(proofPtr, 0x320), or(mload(0x60), mul(and(mload(0x80), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    calldatacopy(add(proofPtr, 0x340), add(metadataIndex, sub(metadataPtr, 0x20)), metadataLength)\n    mstore(add(proofPtr, 0x260), add(0xc0, metadataLength))\n    mstore(add(proofPtr, 0x200), add(0x120, metadataLength))\n    mstore(proofPtr, add(0x320, metadataLength))\n    mstore(0x180, add(add(0x3c0, metadataLength), mload(0x200)))\n    return(0x160, add(mload(0x180), 0x40))\n}",
                  "src": "1474:25973:14"
                }
              ]
            },
            "documentation": "Calldata map\n0x04:0x24      = calldata location of proofData byte array - pointer to the proofData.\n0x24:0x44      = message sender // sender\n0x44:0x64      = h_x     // crs\n0x64:0x84      = h_y     // crs\n0x84:0xa4      = t2_x0   // crs\n0xa4:0xc4      = t2_x1   // crs\n0xc4:0xe4      = t2_y0   // crs\n0xe4:0x104     = t2_y1   // crs\n0x104:0x124    = length of proofData byte array\n0x124:0x144    = challenge\n0x144:0x164    = offset in byte array to notes\n0x164:0x184    = offset in byte array to inputOwners\n0x184:0x1a4    = offset in byte array to outputOwners\n0x1a4:0x1c4    = offset in byte array to metadata*",
            "id": 1805,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "encodeAndExit",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1801,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1447:2:14"
            },
            "returnParameters": {
              "id": 1802,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1464:0:14"
            },
            "scope": 1806,
            "src": "1425:26022:14",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 1807,
        "src": "675:26774:14"
      }
    ],
    "src": "0:27450:14"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.4+commit.9549d8ff.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-09-07T20:01:54.434Z",
  "devdoc": {
    "author": "AZTEC",
    "details": "Don't include this as an internal library. This contract uses a static memory table to cache elliptic curve primitives and hashes. Calling this internally from another function will lead to memory mutation and undefined behaviour. The intended use case is to call this externally via `staticcall`. External calls to OptimizedAZTEC can be treated as pure functions as this contract contains no storage and makes no external calls (other than to precompiles) Copyright Spilsbury Holdings Ltd 2019. All rights reserved.*",
    "methods": {},
    "title": "Library to ABI encode the output of a Swap proof verification"
  },
  "userdoc": {
    "methods": {}
  }
}